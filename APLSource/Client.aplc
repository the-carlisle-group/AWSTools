:Class Client

    :include Utils

    :field private requiredHeaders←'Host' 'x-amz-content-sha256' 'x-amz-date'
    :property RequiredHeaders
    :access public instance

        ∇ r←get
         
          r←requiredHeaders
         
          :If 0≠≢token
              r,←⊂'x-amz-security-token'
          :EndIf 
          
          :If 0≠≢body
              r,←⊂'Content-Length'
          :EndIf
         
          :If 0≠≢Headers
              r,←0⊃¨Headers
          :EndIf
        ∇


        ∇ set v
          requiredHeaders←v.NewValue
        ∇


    :endproperty

    :field private secretKey
    :Property SecretKey
    :access public instance

        ∇ r←get
          r←secretKey
        ∇

        ∇ set v
          secretKey←v.NewValue
        ∇
    :EndProperty

    :field private token←''
    :Property Token
    :access public instance
        ∇ r←get
          r←token
        ∇

        ∇ set v
          token←v.NewValue
        ∇
    :EndProperty

    :field private accessKey
    :Property AccessKey
    :access public instance
        ∇ r←get
          r←accessKey
        ∇

        ∇ set v
          accessKey←v.NewValue
        ∇
    :EndProperty

    :field private httpMethod←'GET'
    :property HTTPMethod
    :access public instance
        ∇ r←get
          r←httpMethod
        ∇

        ∇ set v
          httpMethod←v.NewValue
        ∇

    :endproperty
    :field private timeStamp
    :property TimeStamp
    :Access public instance
        ∇ r←get
          r←timeStamp
        ∇

    :endproperty

    :property Date
    :access public instance
        ∇ r←get
          r←8↑TimeStamp
        ∇
    :endproperty

    :field private uri
    :property URI
    :access public instance
        ∇ r←get
          r←uri
        ∇

        ∇ set v
          uri←v.NewValue
        ∇
    :endproperty

    ⍝:field private region
⍝    :property Region
⍝    :access public instance
⍝        ∇ r←get
⍝          r←region
⍝        ∇
⍝
⍝        ∇ set v
⍝          region←v.NewValue
⍝        ∇
⍝    :endproperty
⍝
⍝    :field private service←''
⍝    :property Service
⍝    :access public instance
⍝        ∇ r←get
⍝          r←service
⍝        ∇
⍝
⍝        ∇ set v;list
⍝          list←'s3' 'dynamodb'
⍝          :If ~(⊂v.NewValue)∊list
⍝              ('Supported service types: ',¯2↓∊list,' ,')⎕SIGNAL 6
⍝          :EndIf
⍝          service←v.NewValue
⍝        ∇
⍝    :endproperty

    :field private headers←⍬

    :property Headers
    :access public instance
        ∇ r←get;hh;h
          r←headers
        ∇

        ∇ set v
          headers←v.NewValue
        ∇
    :endproperty

    :property HeaderNames
    :access public instance
        ∇ r←get;hh;h
          r←RequiredHeaders[⍋lcase¨RequiredHeaders]
        ∇

    :endproperty


    :property HeadersConical
    :access public instance
        ∇ r←get;hh;h;th;hi
         
          hh←⍬
         
          :For h :In (819⌶)¨RequiredHeaders
              :Select h
              :Case 'host'
                  hh,←⊂h,':',URI.Host
              :Case 'x-amz-content-sha256'
                  :If unsignedPayload
                      hh,←⊂h,':UNSIGNED-PAYLOAD'
                  :Else
                      hh,←⊂h,':',Hash_SHA256 Body
                  :EndIf
              :Case 'x-amz-date'
                  hh,←⊂h,':',TimeStamp
              :Case 'content-length'
                  hh,←⊂h,':',⍕≢body
              :Case 'x-amz-security-token'
                  hh,←⊂h,':',token
              :Else
                  hi←((819⌶)¨0⊃¨Headers)⍳⊂h
                  hh,←⊂h,':',hi 1⊃Headers
              :EndSelect
         
          :EndFor
         
          hh←hh[⍋(819⌶)¨RequiredHeaders]        ⍝ order alpha
          r←∊hh,¨NewLine
        ∇

    :endproperty

    :field private unsignedPayload←0
    :property UnsignedPayload
    :access public instance
        ∇ r←get
          r←unsignedPayload
        ∇

        ∇ set v
          unsignedPayload←v.NewValue
        ∇
    :endproperty

    :field body←''
    :property Body
    :access public instance

        ∇ r←get
          r←body
        ∇

        ∇ set v
          body←v.NewValue
        ∇

    :endproperty


    ∇ Z←New(sn rg)
      :Access public shared
      ⍝ sn = Service Name
      ⍝ rg = Region
      ⍝ Z  = Client Instance
      Z←⎕NEW ⎕THIS(sn rg)
    ∇

    ∇ const0(sn rg)
      :Access public
      :Implements constructor
      timeStamp←GetTimeStamp
      SetDefaultKeys ##.##.AcreConfig.ProjectFolder
      rumba←#.CarlisleGroup.Rumba.Core
      uri←##.##.URI.New
      uri.HostService←sn
      uri.HostRegion←rg
      uri.HostPrefix←''
    ∇

      SetDefaultKeys←{
          p←⍵
          0=⎕NEXISTS ⍵:_←0
          fp←⍵,'defaultKeys.csv'
          0=⎕NEXISTS fp:_←0
          keys←0⊃⎕CSV fp'UTF-8'⍬ 1
          0=≢keys:_←0
          ⎕THIS.(accessKey secretKey)←keys[0;]
      }


    ∇ Z←ConstructConicalRequest;cr;qp;q;ct;n;v
      :Access public instance
     
      cr←HTTPMethod,NewLine
      cr,←URI.Path,NewLine
     
      :If 0≠≢URI.QueryParams
          qp←⍬
          :For (n v) :In URI.QueryParams
              qp,←⊂(UriEncode n),'=',(UriEncode v)
          :EndFor
          qp←qp[⍋qp]  ⍝ must sort alpa post encode
          cr,←¯1↓∊qp,¨'&'
      :EndIf
     
      cr,←NewLine
      cr,←∊HeadersConical
      cr,←NewLine
      cr,←(getHeaderNameString HeaderNames),NewLine
      :If unsignedPayload
          cr,←'UNSIGNED-PAYLOAD'
      :Else
          cr,←Hash_SHA256 Body
      :EndIf
      Z←cr
    ∇

    ∇ Z←ConstructStringToSign;ss
      :Access public instance
      ss←'AWS4-HMAC-SHA256',NewLine
      ss,←TimeStamp,NewLine
      ss,←Date,'/',URI.HostRegion,'/',URI.HostService,'/aws4_request',NewLine
      ss,←Hash_SHA256 ConstructConicalRequest
      Z←ss
     
    ∇


    ∇ Z←ConstructSignatureKey;dateKey;dateRegionKey;dateRegionServiceKey;signingKey
      :Access public instance
      dateKey←('AWS4',SecretKey)HMAC_SHA256 Date
      dateRegionKey←(80 ⎕DR dateKey)HMAC_SHA256 URI.HostRegion
      dateRegionServiceKey←(80 ⎕DR dateRegionKey)HMAC_SHA256 URI.HostService
      signingKey←(80 ⎕DR dateRegionServiceKey)HMAC_SHA256'aws4_request'
      Z←80 ⎕DR signingKey
    ∇

    ∇ Z←ConstructSignature;ss;sigKey
      :Access public instance
      ss←ConstructStringToSign
      sigKey←ConstructSignatureKey
      Z←∊ToHex sigKey HMAC_SHA256 ss
    ∇

    ∇ Z←ConstructCredentialLine
      :Access public instance
      Z←AccessKey
      Z,←,'/',Date
      Z,←'/',URI.HostRegion
      Z,←'/',URI.HostService
      Z,←'/aws4_request'
    ∇

    ∇ Z←ConstructAuthorizationHeader;sigKey;reqSig;ss;authHeader
      :Access public instance
      reqSig←ConstructSignature
      authHeader←'AWS4-HMAC-SHA256 '
      authHeader,←'Credential=',ConstructCredentialLine,', '
      authHeader,←'SignedHeaders=',(getHeaderNameString HeaderNames),', '
      authHeader,←'Signature=',reqSig
      Z←authHeader
    ∇
      getHeaderNameString←{
          h←(819⌶)¨⍵
          (¯1↓∊h,¨';')
      }

    ∇ Z←SendRequest signalError;h;c;r;res;xml
      :Access public instance
      ⍝ signalError : ⎕SIGNAL to http response not ≥200<300
      timeStamp←GetTimeStamp
      h←⍬
     
      h,←⊂'Accept-Encoding' 'gzip'
      h,←⊂'Authorization'ConstructAuthorizationHeader
      h,←⊂'x-amz-content-sha256'(Hash_SHA256 Body)
      h,←⊂'x-amz-date'TimeStamp
     
      :If 0≠≢Token
      :AndIf URI.HostService≡'s3'
          h,←⊂'x-amz-security-token'token
      :EndIf
     
      :If 0≠≢Headers
          h,←Headers
      :EndIf
      h←h[⍋(819⌶)¨↑¨h]
     
      c←rumba.NewClient''
      c.ClientTimeout←60000
      c.Host,←URI.Host
      c.Secure←URI.Scheme≡'https'
      c.Port←URI.Port
      r←rumba.NewRequest''
     
      r.Method←HTTPMethod
      r.URI←URI.Path,URI.Query
      r.Content←Body
      r.Headers←h
      res←c rumba.SendAndReceive r
     
      :If signalError
      :AndIf (res.StatusCode<200)∨(res.StatusCode>300)
          SignalError res
      :EndIf
     
      Z←res
    ∇

    ∇ Z←Clone
      :Access public instance
      Z←(↑↑⎕CLASS ⎕THIS).New URI.(HostService HostRegion)
      Z.(AccessKey SecretKey Token)←(accessKey secretKey token)
      Z.URI.(Fragment Port Scheme QueryParams Path)←URI.(Fragment Port Scheme QueryParams Path)
      Z.URI.HostRegion←URI.HostRegion
      Z.URI.HostService←URI.HostService
      Z.URI.HostPrefix←URI.HostPrefix
    ∇

:EndClass
