:Class Object

    :include ##.Utils

    :field private service
    :field private name←''
    :field private creationDate←''
    :field private client
    :field private bucket

    :field private   key←''
    :field private   lastModified
    :field private   eTag
    :field private   size
    :field private   storageClass
    :field private ownerID
    :field private ownerDisplayName
    :field private isRetreived←0
    :field private value  ←⍬
    :field private contentType←''
    :field private lastRetreived←⍬
    :field private version←''
    :field private acl←'private'
    :field private folder←''
    :field public MultiPartBlockSize← 5×1048576

    :field public shared Readonly ACLList←'private'  'public-read'  'public-read-write'  'aws-exec-read' 'authenticated-read' 'bucket-owner-read'  'bucket-owner-full-control'

    :field private metaData←⍬
    :property MetaData
    :access public instance
        ∇ r←get
          r←metaData
        ∇

        ∇ set v
          metaData←v.NewValue
        ∇
    :endproperty

    :property URI
    :access public instance

        ∇ r←get
          r←client.URI.URI
        ∇

    :endproperty

    :property  ACL
    :access public

        ∇ set v
         
          :If ~(⊂v.NewValue)∊ACLList
              ⎕SIGNAL⊂('EN' 6)('EM' 'Invalid Access Control List value.')('Message' 'See Object.ACLList for options.')
          :EndIf
          acl←v.NewValue
        ∇

        ∇ r←get
          r←acl
        ∇

    :endproperty


    :property  Folder
    :access public

        ∇ r←get
          r←folder
        ∇


        ∇ set v
          folder←v.NewValue,('/'≠¯1↑v.NewValue)/'/'
          Key←key
        ∇
    :endproperty

    :property  Version
    :access public

        ∇ r←get
          r←version
        ∇


        ∇ set v
          version←''
          →('null'≡v.NewValue)/0
          version←v.NewValue
        ∇
    :endproperty


    :property  IsRetreived
    :access public

        ∇ r←get
          r←isRetreived
        ∇

    :endproperty

    :property  LastRetreived
    :access public

        ∇ r←get
          r←lastRetreived
        ∇

    :endproperty

    :property  Value
    :access public

        ∇ r←get
          r←value
        ∇

        ∇ set v
          :If 1≠≡v.NewValue
              'S3 Object value must be a simple string.'⎕SIGNAL 6
          :EndIf
          value←v.NewValue
        ∇

    :endproperty

    :property  ContentType
    :access public

        ∇ r←get
          r←contentType
        ∇

        ∇ set v
          contentType←v.NewValue
        ∇

    :endproperty


    :property  ContentLength
    :access public

        ∇ r←get
          r←≢value
        ∇

    :endproperty

    :property  OwnerID
    :access public

        ∇ r←get
          r←ownerID
        ∇

        ∇ set v
          ownerID←v.NewValue
        ∇

    :endproperty


    :property  OwnerDisplayName
    :access public

        ∇ r←get
          r←ownerDisplayName
        ∇

        ∇ set v
          ownerDisplayName←v.NewValue
        ∇

    :endproperty

    :property   Key
    :access public

        ∇ r←get
          r←key
        ∇

        ∇ set v;t
          :If (⊂'/')∊v.NewValue
              t←(~v.NewValue='/')⊆v.NewValue
              key←↑¯1↑t
              folder←∊(¯1↓t),¨'/'
          :Else
              key←v.NewValue
          :EndIf
         
          client.URI.Path←'/',Folder,Key
         
        ∇

    :endproperty

    :property   LastModified
    :access public

        ∇ r←get
          r←lastModified
        ∇

        ∇ set v
          lastModified←v.NewValue
        ∇

    :endproperty

    :property   ETag
    :access public

        ∇ r←get
          r←eTag
        ∇

        ∇ set v
          eTag←v.NewValue
        ∇

    :endproperty

    :property   Size
    :access public

        ∇ r←get
          r←size
        ∇

        ∇ set v
          size←v.NewValue
        ∇

    :endproperty

    :property   StorageClass
    :access public

        ∇ r←get
          r←storageClass
        ∇

        ∇ set v
          storageClass←v.NewValue
        ∇

    :endproperty


    ∇ uploads
     
    ∇

    ∇ Z←New b
      :Access public shared
      Z←⎕NEW ⎕THIS b
    ∇

    ∇ const0 s
      :Access public
      :Implements constructor
      bucket←s
      client←bucket.Client.Clone
      client.URI.Region←bucket.Region
    ∇

    ∇ {Z}←GetValue;res;c
      :Access public instance
      ⍝ Z   : 0 if no value
     
      :If 0=≢Key
          ⎕SIGNAL⊂('EN' 6)('EM' 'Key property is empty.')('Message' 'Key must be a valid object on S3.')
      :EndIf
     
      c←client.Clone
      c.HTTPMethod←'GET'
      res←c.SendRequest 1
     
      contentType←res.ContentType.ContentType
      processHeaders res
     
      isRetreived←1
      value←res.Content
      lastRetreived←⎕TS
      Z←0=≢value
    ∇

      processHeaders←{
          h←⊃⍵
          lastModified∘←⍵ #.CarlisleGroup.Rumba.Core.GetHeaderValue'last-modified'
          eTag∘←⍵ #.CarlisleGroup.Rumba.Core.GetHeaderValue'etag'
          Version∘←⍵ #.CarlisleGroup.Rumba.Core.GetHeaderValue'x-amz-version-id'
     
          metaIndex←⍸∨/('x-amz-meta-')⍷⊃0⊃¨⍵.Headers
          0=≢metaIndex:_←0
          metaData←res.Headers[metaIndex]
          1:_←0
      }


    ∇ {Z}←GetMetaData;res;c
      :Access public instance
      ⍝ Z   : 0 if no value
     
      :If 0=≢Key
          ⎕SIGNAL⊂('EN' 6)('EM' 'Key property is empty.')('Message' 'Key must be a valid object on S3.')
      :EndIf
     
      c←client.Clone
      c.HTTPMethod←'HEAD'
      res←c.SendRequest 1
     
      contentType←res.ContentType.ContentType
      processHeaders res
     
      isRetreived←0
      value←⍬
      lastRetreived←⍬
     
      Z←0
    ∇

    ∇ Z←Delete;res;c
      :Access public instance
      ⍝ Z   : 0 if deleted
     
      :If 0=≢Key
          ⎕SIGNAL⊂('EN' 6)('EM' 'Key property is empty.')('Message' 'Key must be a valid object on S3.')
      :EndIf
     
      c←client.Clone
      c.URI.QueryParams←⍬
      c.HTTPMethod←'DELETE'
      res←c.SendRequest 1
      Z←res.StatusCode≠204
    ∇

    ∇ {Z}←PutMultiPart cbPath;c;res;uploadId;block;startByte;stopByte;data;etag;xml;dataSize;state;cbNS;errMsg;cbExe;blockCount
      :Access public instance
      ⍝ cbPath  = text to callback for each state change
      ⍝         = argument to function will be a namespace with
      ⍝         = the callback will be executed in a thread.
      ⍝         = all errors and results will be supressed!!!
      ⍝ cbPath = ''     : no callback!
      ⍝ ns←⎕ns''
      ⍝ ns.blockCount   : total number of blocks
      ⍝ ns.currentBlock : current block number
      ⍝ ns.uploadSize   : byte size of upload
      ⍝ ns.blockSize    : default size of blocks
      ⍝ ns.isDone       : is the operation finished
      ⍝ ns.message      : state message
      ⍝ ns.uploadId     : amazon uploadid once initiated
      ⍝ Z   = 0 / success; 1 / failure
     
      cbExe←⍎'{0::_←0 ⋄ {}',cbPath,' ⍵}'
     
      cbNS←⎕NS''
      cbNS.blockCount←¯1
      cbNS.currentBlock←0
      cbNS.uploadSize←¯1
      cbNS.blockSize←MultiPartBlockSize
      cbNS.isDone←0
      cbNS.message←''
      cbNS.uploadId←''
     
      :If 80=⎕DR value
          data←value
      :Else
          data←⎕UCS'UTF-8'⎕UCS value
      :EndIf
     
      dataSize←≢data
      cbNS.uploadSize←dataSize
     
      :If 0=≢Key
          errMsg←'Key property is empty.'
          cbNS.message←errMsg
          cbNS.isDone←1
          cbExe cbNS
          ⎕SIGNAL⊂('EN' 6)('EM'errMsg)('Message' 'Key must be a valid object on S3.')
      :EndIf
     
      cbNS.message←'Init multipart upload on S3.'
      cbExe cbNS
     
      c←client.Clone
      c.HTTPMethod←'POST'
      c.URI.QueryParams←,⊂('uploads' '')
      c.Headers←,⊂'Content-Type'ContentType
      c.Headers,←⊂'x-amz-acl'acl
     
      :If ⍬≢metaData
          c.Headers,←metaData
      :EndIf
     
      res←c.SendRequest 1
      Z←200≠res.StatusCode
     
      uploadId←(⎕XML res.Content)GetXMLTagValue'UploadId'
      cbNS.uploadId←uploadId
      cbExe cbNS
     
      etag←⍬
      startByte←0
      stopByte←0
      blockCount←⌈dataSize÷MultiPartBlockSize
      cbNS.blockCount←blockCount
     
      :For block :In ⍳blockCount
     
          cbNS.currentBlock←block
          cbNS.message←'Uploading part ',(⍕1+block),' of ',(⍕blockCount),'.'
          cbExe cbNS
          startByte←block×MultiPartBlockSize
          stopByte←startByte+MultiPartBlockSize
     
          :If stopByte>dataSize
              stopByte←startByte+dataSize-startByte
          :EndIf
     
          c←client.Clone
          c.HTTPMethod←'PUT'
          c.URI.QueryParams←,('partNumber'(⍕1+block))('uploadId'uploadId)
          c.Body←startByte↓stopByte↑data
          res←c.SendRequest 1
          Z←200≠res.StatusCode
          etag,←⊂((0⊃¨res.Headers)⍳⊂'etag')1⊃res.Headers
     
      :EndFor
     
      cbNS.message←'Sending S3 complete upload.'
      cbExe cbNS
      c←client.Clone
      c.HTTPMethod←'POST'
      c.URI.QueryParams←,⊂('uploadId'uploadId)
     
      xml←1 4⍴0 'CompleteMultipartUpload' ''(0 2⍴'')
      xml⍪←⊃↑,/etag{(1 'Part' ''(0 2⍴''))(2 'PartNumber'⍵(0 2⍴''))(2 'ETag'⍺'')}¨1++⍳≢etag
      c.Body←⎕XML xml
     
      res←c.SendRequest 1
      Z←'CompleteMultipartUploadResult'≢↑(⎕XML res.Content)[0;1]
     
      cbNS.isDone←1
      cbNS.message←Z⊃'File Ready' 'Error'
      cbExe cbNS
    ∇


    ∇ {Z}←Put;res;c
      :Access public instance
      ⍝ Z   = 0 / success; 1 / failure
     
      :If 0=≢Key
          ⎕SIGNAL⊂('EN' 6)('EM' 'Key property is empty.')('Message' 'Key must be a valid object on S3.')
      :EndIf
     
      c←client.Clone
      c.HTTPMethod←'PUT'
     
      :If 80=⎕DR value
          c.Body←value
      :Else
          c.Body←⎕UCS'UTF-8'⎕UCS value
      :EndIf
     
      c.Headers←,⊂'Content-Type'ContentType
      c.Headers,←⊂'x-amz-acl'acl
     
      :If ⍬≢metaData
          c.Headers,←metaData
      :EndIf
     
      res←c.SendRequest 1
      Z←200≠res.StatusCode
    ∇

    ∇ Z←GeneratePreSignedGet seconds;cr;ss;camz;out;sig;exp;c
      :Access public instance
     
      :If 0=80|⎕DR seconds
      :OrIf seconds<1
      :OrIf seconds>86400
          'Second argument must be between 1-86400.'⎕SIGNAL 6
      :EndIf
     
      exp←seconds
     
      c←client.Clone
      c.HTTPMethod←'GET'
      c.UnsignedPayload←1
      c.RequiredHeaders←,⊂'Host'
     
      c.URI.QueryParams←⍬
      c.URI.QueryParams,←⊂('X-Amz-Algorithm' 'AWS4-HMAC-SHA256')
      c.URI.QueryParams,←⊂('X-Amz-Credential'c.ConstructCredentialLine)
      c.URI.QueryParams,←⊂('X-Amz-Date'c.TimeStamp)
      c.URI.QueryParams,←⊂('X-Amz-Expires'(⍕exp))
      c.URI.QueryParams,←⊂('X-Amz-SignedHeaders' 'host')
     
      out←c.URI.URI
      out,←'&X-Amz-Signature=',c.ConstructSignature
      Z←out
    ∇

:EndClass
