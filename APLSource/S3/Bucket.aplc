:Class Bucket

    :include ##.Utils

    :field private service
    :field private name←''
    :field private creationDate←''
    :field private isTruncated ←0
    :field private contToken←''
    :field private nextContinuationToken←''
    :field private client
    :field private region←''

    :property Client
    :access public instance
        ∇ r←get
          r←client
        ∇
    :Endproperty


    :property IsTruncated
    :access public instance
        ∇ r←get
          r←isTruncated
        ∇
    :Endproperty

    :property ContinuationToken
    :access public instance
        ∇ r←get
          r←contToken
        ∇
    :Endproperty


    :property NextContinuationToken
    :access public instance
        ∇ r←get
          r←nextContinuationToken
        ∇
    :Endproperty

    :property Name
    :access public instance
        ∇ r←get
          r←name
        ∇
        ∇ set v
          name←v.NewValue
        ∇
    :endproperty

    :property CreationDate
    :access public instance
        ∇ r←get
          r←creationDate
        ∇
        ∇ set v
          creationDate←v.NewValue
        ∇
    :endproperty

    ∇ Z←New s
      :Access public shared
      Z←⎕NEW ⎕THIS s
    ∇

    ∇ const0 s
      :Access public
      :Implements constructor
      service←s
      client←service.Client.Clone
    ∇

    ∇ Z←GetObjects(startAfterId maxKeys);res;xml;bc;b;tb;params;pi
      :Access public instance
     
      isTruncated←0
      contToken←''
      nextContinuationToken←''
     
      params←⍬
     
      :If 0≠≢startAfterId
          params,←⊂'start-after'startAfterId
      :EndIf
     
      :If 0≠maxKeys
          params,←⊂'max-keys'(⍕maxKeys)
      :EndIf
     
      xml←getObjects params
     
      →(0=⍎2⊃xml[(xml[;1]⍳⊂'KeyCount');])/0
     
      isTruncated←'true'≡2⊃xml[xml[;1]⍳⊂'IsTruncated';]
      :If IsTruncated
          nextContinuationToken←2⊃xml[xml[;1]⍳⊂'NextContinuationToken';]
      :EndIf
     
      Z←⍬
     
     
      xml←((xml[;1]∊⊂'Contents')⍳1)↓xml
      bc←(~(xml[;1]∊⊂'Contents'))⊆↓xml[;1 2]
     
      pi←'Key' 'LastModified' 'ETag' 'Size' 'StorageClass' 'ID' 'DisplayName'
      pi←(0⊃¨0⊃bc)⍳pi
     
      :For b :In bc
          tb←##.##.Object.New ⎕THIS
          tb.(Key LastModified ETag Size StorageClass OwnerID OwnerDisplayName)←1⊃¨b[pi]
          Z,←tb
      :EndFor
     
    ∇

    ∇ Z←GetAllObjects;res;xml;bc;b;tb;cont;params
      :Access public instance
     
      isTruncated←0
      contToken←''
      nextContinuationToken←''
      cont←1
     
      Z←⍬
     
      :While cont
     
          :If 0=≢NextContinuationToken
              xml←getObjects''
          :Else
              params←⊂'continuation-token'NextContinuationToken
              xml←getObjects params
          :EndIf
     
          isTruncated←'true'≡2⊃xml[xml[;1]⍳⊂'IsTruncated';]
          :If IsTruncated
              nextContinuationToken←2⊃xml[xml[;1]⍳⊂'NextContinuationToken';]
          :EndIf
     
          bc←(xml[;0]=2)⊆↓xml
     
          :For b :In bc
              tb←##.##.Object.New ⎕THIS
              tb.(Key LastModified ETag Size StorageClass)←2⊃¨b
              Z,←tb
          :EndFor
     
          cont←isTruncated
     
      :EndWhile
     
    ∇

    ∇ Z←getObjects params;res
      :Access private
      client.URI.Host←Name,'.s3.amazonaws.com'
      client.URI.Path←'/'
      client.URI.QueryParams←('list-type' '2')('fetch-owner' 'true')
      client.Region←Region
      :If 0≠≢params
          client.URI.QueryParams,←params
      :EndIf
      client.URI.QueryParams←client.URI.QueryParams[⍋0⊃¨client.URI.QueryParams]
     
      res←client.SendRequest 1
      CheckContentTypeXML res
      Z←⎕XML res.Content
    ∇

    :property Region
    :access public instance
        ∇ r←get
         
          :If 0=≢region
              region←getBucketRegion
          :EndIf
         
          r←region
        ∇

        ∇ set v
          region←v.NewValue
        ∇
    :endproperty

    ∇ Z←getBucketRegion;res;xml;v;c2
     
      c2←client.Clone
      c2.URI.Host←Name,'.s3.amazonaws.com'
      c2.URI.Path←'/'
      c2.URI.QueryParams←,⊂'location' ''
     
      res←c2.SendRequest 0
     
      CheckContentTypeXML res
      xml←⎕XML res.Content
     
      :If 400=res.StatusCode
          v←xml #.AWS.Utils.GetXMLTagValue'Message'
          Z←↑('the region ''.+'' is wrong; expecting ''(.+)'''⎕S'\1')v
          :Return
      :EndIf
     
      v←2⊃xml[xml[;1]⍳⊂'LocationConstraint';]
     
      :If 0=≢v
      ⍝ https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETlocation.html
      ⍝US East(N.Virginia),
          Z←'us-east-1'
      :Else
          stop
      :EndIf
    ∇

    ∇ Z←Exists;c2;res;xml
      :Access public instance
      c2←client.Clone
      c2.URI.Host←Name,'.s3.amazonaws.com'
      c2.URI.Path←'/'
      c2.URI.QueryParams←⍬
      :Trap 0
          res←c2.SendRequest 1
          Z←1
      :Else
          Z←0
      :EndTrap
    ∇

    ∇ {Z}←Create;c2;res;xml
      :Access public instance
      ⍝ Z   : dummy
      c2←client.Clone
      c2.HTTPMethod←'PUT'
      c2.URI.Host←Name,'.s3.amazonaws.com'
      c2.URI.Path←'/'
      c2.URI.QueryParams←⍬
      res←c2.SendRequest 1
      Z←0
    ∇

    ∇ {Z}←Delete;c2;res;xml
      :Access public instance
      ⍝ Z   : dummy
      c2←client.Clone
      c2.HTTPMethod←'DELETE'
      c2.URI.Host←Name,'.s3.amazonaws.com'
      c2.URI.Path←'/'
      c2.URI.QueryParams←⍬
      res←c2.SendRequest 1
     
      :If 204≠res.StatusCode
          SignalError 204 'Error deleting bucket.'
      :EndIf
     
      Z←0
    ∇
:EndClass
