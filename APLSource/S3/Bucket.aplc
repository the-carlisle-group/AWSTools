:Class Bucket

    :include ##.Utils

    :field private name←''
    :field private creationDate←''
    :field private isTruncated ←0
    :field private contToken←''
    :field private nextContinuationToken←''
    :field private client
    :field private region←''

    :property Client
    :access public instance
        ∇ r←get
          r←client
        ∇

        ∇ set v
          client←v.NewValue
        ∇
    :Endproperty


    :property IsTruncated
    :access public instance
        ∇ r←get
          r←isTruncated
        ∇
    :Endproperty

    :property ContinuationToken
    :access public instance
        ∇ r←get
          r←contToken
        ∇
    :Endproperty

    :property NextContinuationToken
    :access public instance
        ∇ r←get
          r←nextContinuationToken
        ∇
    :Endproperty

    :property Name
    :access public instance
        ∇ r←get
          r←name
        ∇
        ∇ set v
          name←v.NewValue
          client.URI.HostPrefix←name
        ∇
    :endproperty

    :property CreationDate
    :access public instance
        ∇ r←get
          r←creationDate
        ∇
        ∇ set v
          creationDate←v.NewValue
        ∇
    :endproperty

    ∇ Z←New(c n)
      :Access public shared
      ⍝ s   = service instance
      ⍝ bn  = new/existing bucket name
      Z←⎕NEW ⎕THIS(c n)
    ∇

    ∇ const0(c n)
      :Access public
      :Implements constructor
      name←n
      client←c.Clone
      client.URI.HostPrefix←n
      client.URI.HostRegion←Region
    ∇


    ∇ Z←GetObjects(startAfterId maxKeys prefix);res;xml;bc;b;tb;params;pi
      :Access public instance
     
      Z←⍬
     
      isTruncated←0
      contToken←''
      nextContinuationToken←''
     
      params←⍬
     
      :If 0≠≢startAfterId
          params,←⊂'start-after'startAfterId
      :EndIf
     
      :If 0≠maxKeys
          params,←⊂'max-keys'(⍕maxKeys)
      :EndIf
     
      :If 0≠≢prefix
          params,←⊂'prefix'prefix
      :EndIf
     
      xml←getObjects params
     
      →(0=⍎2⊃xml[(xml[;1]⍳⊂'KeyCount');])/0
     
      isTruncated←'true'≡2⊃xml[xml[;1]⍳⊂'IsTruncated';]
      :If IsTruncated
          nextContinuationToken←2⊃xml[xml[;1]⍳⊂'NextContinuationToken';]
      :EndIf
     
      xml←((xml[;1]∊⊂'Contents')⍳1)↓xml
      bc←(~(xml[;1]∊⊂'Contents'))⊆↓xml[;1 2]
     
      pi←'Key' 'LastModified' 'ETag' 'Size' 'StorageClass' 'ID'
      pi←(0⊃¨0⊃bc)⍳pi
     
      :For b :In bc
          tb←##.##.Object.New ⎕THIS
          tb.(Key LastModified ETag Size StorageClass OwnerID)←1⊃¨b[pi]
          tb.OwnerDisplayName←xml GetXMLTagValue'DisplayName' ''
          Z,←tb
      :EndFor
     
    ∇

    ∇ Z←GetAllObjects;res;xml;bc;b;tb;cont;params;keyIndex
      :Access public instance
     
      isTruncated←0
      contToken←''
      nextContinuationToken←''
      cont←1
     
      Z←⍬
     
      :While cont
     
          :If 0=≢NextContinuationToken
              xml←getObjects''
          :Else
              params←⊂'continuation-token'NextContinuationToken
              xml←getObjects params
          :EndIf
     
          isTruncated←'true'≡2⊃xml[xml[;1]⍳⊂'IsTruncated';]
          :If IsTruncated
              nextContinuationToken←2⊃xml[xml[;1]⍳⊂'NextContinuationToken';]
          :EndIf
     
          xml←(xml[;1]⍳⊆'Contents')↓xml
          bc←(xml[;0]≠1)⊆↓xml
     
          :For b :In bc
              keyIndex←(⊃b)[;1]⍳'Key' 'LastModified' 'ETag' 'Size' 'StorageClass'
              tb←##.##.Object.New ⎕THIS
              tb.(Key LastModified ETag Size StorageClass)←(⊃b)[keyIndex;2]
              Z,←tb
          :EndFor
     
          cont←isTruncated
     
      :EndWhile
     
    ∇

    ∇ Z←getObjects params;res;c2
      :Access private
      c2←client.Clone
      client.URI.Path←'/'
      client.URI.QueryParams←('list-type' '2')('fetch-owner' 'true')
      client.URI.Region←Region
     
      :If 0≠≢params
          client.URI.QueryParams,←params
      :EndIf
      client.URI.QueryParams←client.URI.QueryParams[⍋0⊃¨client.URI.QueryParams]
     
      res←client.SendRequest 1
      CheckContentTypeXML res
      Z←⎕XML res.Content
    ∇

    :property Region
    :access public instance
        ∇ r←get
         
          :If 0=≢region
              region←getBucketRegion
          :EndIf
         
          r←region
        ∇

        ∇ set v
          region←v.NewValue
        ∇
    :endproperty

    ∇ Z←getBucketRegion;res;xml;v;c2
     
      c2←client.Clone
      c2.URI.QueryParams←,⊂'location' ''
      res←c2.SendRequest 0
     
      CheckContentTypeXML res
      xml←⎕XML res.Content
     
      :If 400=res.StatusCode
          v←xml #.AWS.Utils.GetXMLTagValue'Message'
          Z←↑('the region ''.+'' is wrong; expecting ''(.+)'''⎕S'\1')v
          :Return
      :EndIf
     
      :If xml[0;1]≡⊂'Error'
      :AndIf res.StatusCode≥400
          :If xml[1;2]≡⊂'NoSuchBucket'
              Z←client.URI.HostRegion
              :Return
          :ElseIf res.StatusCode=403
              ⎕SIGNAL⊂('EN'res.StatusCode)('EM'(2⊃xml[1;]))('Message' 'Does the bucket exist or belong to someone else?')
          :Else
              SignalError res
          :EndIf
      :EndIf
     
      v←2⊃xml[xml[;1]⍳⊂'LocationConstraint';]
     
      :If 0=≢v
      ⍝ https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETlocation.html
      ⍝US East(N.Virginia),
          Z←'us-east-1'
      :Else
          Z←v
      :EndIf
    ∇

    ∇ Z←Exists;c2;res;xml
      :Access public instance
      c2←client.Clone
     
      :Trap 0
          res←c2.SendRequest 1
          Z←1
      :Else
          Z←0
      :EndTrap
    ∇

    ∇ {Z}←Create;c2;res;xml
      :Access public instance
      ⍝ Z   : dummy
     
      c2←client.Clone
     
      :If Region≢c2.URI.HostRegion
          ⎕SIGNAL⊂('EN' 11)('EM' 'AWS Client and S3 bucket region mismatch.  Must be the same.')
      :EndIf
     
      c2.HTTPMethod←'PUT'
     
      ⍝ Location Constraint only required if not in us-east-1!
      :If Region≢'us-east-1'
          c2.ContentType←'text/plain'
          xml←1 4⍴0 'CreateBucketConfiguration' ''(1 2⍴'xmlns' 'http://s3.amazonaws.com/doc/2006-03-01/')
          xml⍪←1 'LocationConstraint'Region(0 2⍴'')
          c2.Body←⎕XML xml
      :EndIf
     
      res←c2.SendRequest 1
      Z←0
    ∇

    ∇ {Z}←Delete;c2;res;xml
      :Access public instance
      ⍝ Z   : dummy
      c2←client.Clone
      c2.HTTPMethod←'DELETE'
      res←c2.SendRequest 1
     
      :If 204≠res.StatusCode
          SignalError 204 'Error deleting bucket.'
      :EndIf
     
      Z←0
    ∇

    ∇ Z←GetIncompleteMultiPart;c2;res;xml
      :Access public instance
      ⍝ return up to 1000.  Query until 0 count
      c2←client.Clone
      c2.HTTPMethod←'GET'
      c2.URI.QueryParams←,⊂('uploads' '')
      res←c2.SendRequest 1
      xml←⎕XML res.Content
     
      :If ~(⊂'Key')∊xml[;1]
          Z←⍬
      :Else
          Z←{ns←⎕NS'' ⋄ ns.(Key UploadId Initiator)←↑¨⍵ ⋄ ns}¨(xml[;1]∊'Key' 'UploadId' 'Initiator')⊂↓xml[;2 3]
      :EndIf
    ∇

    ∇ Z←DeleteIncompleteObject ns;c2;res;xml
    ⍝ delete incomplete multuparl
      :Access public instance
      Z←⍬
      →((ns≡0)∨0=≢ns)/0
      c2←client.Clone
      c2.HTTPMethod←'DELETE'
      c2.URI.QueryParams←,⊂('uploadId'ns.UploadId)
      c2.URI.Path←'/',ns.Key
      res←c2.SendRequest 1
      Z←0
    ∇
:EndClass
